#!/usr/bin/env node

/*

 Copyright 2015-2018 Telefonica Investigaci√≥n y Desarrollo, S.A.U

 This file is part of Tartare.

 Tartare is free software: you can redistribute it and/or modify it under the
 terms of the Apache License as published by the Apache Software Foundation,
 either version 2.0 of the License, or (at your option) any later version.
 Tartare is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 See the Apache License for more details.

 You should have received a copy of the Apache License along with Tartare.
 If not, see http://www.apache.org/licenses/LICENSE-2.0

 For those usages not covered by the Apache License please contact with:
 joseantonio.rodriguezfernandez@telefonica.com

 */

'use strict';

var Tartare = require('..');
var fs = require('fs');
var path = require('path');

function _printHelp() {
  console.log('\n  Usage: tartare [options] [files]');
  console.log('\n  Options:\n');
  console.log('    -h, --help                              output usage information');
  console.log('    -V, --version                           output the version number');
  console.log('    -r, --require                           require the given module');
  console.log('    -R, --reporter <name>                   specify the reporter to use [gherkin]');
  console.log('    -O, --reporter-options <k=v,k2=v2,...>  reporter-specific options');
  console.log('    -t, --timeout <ms>                      set test timeout in milliseconds [10000]');
  console.log('    -f, --filter <filter_str>               run only tests matching <filter_str>');
  console.log('    -c, --colors                            force enabling of colors');
  console.log('    -C, --no-colors                         force disabling of colors');
  console.log('    --theme (dark|clear)                    set the color theme to be used with the gherkin reporter');
  console.log('    --no-interactive                        disable interactive features');
  console.log('    -B, --no-bail                           prevent from bailing after first step failure');
  console.log('    --no-exit                               require a clean shutdown of the event loop: ' +
      'Tartare will not call process.exit');
  console.log('    --no-timeouts                           disable timeouts');
  console.log('    --recursive                             include sub directories');
  console.log('    --reporters                             display available reporters');
  console.log();
  console.log('  Filter syntax:');
  console.log('  - Tags can only contain uppercase/lowercase letters, numbers, and underscore.');
  console.log('  - These tags are reserved: only, skip, manual, bug.');
  console.log('  - Tags can be combined with the following operators:');
  console.log('      +: before a tag indicates that the tag must exist (it is equivalent to putting the tag alone)');
  console.log('      -: before a tag indicates that the tag must NOT exist');
  console.log('      & or ,: between two tags (or expressions) means a logic AND');
  console.log('      |: between two tags (or expressions) means a logic OR');
  console.log('      (): parenthesis can be used to indicate precedence');
  console.log();
  process.exit(0);
}

function _printVersion() {
  console.log(JSON.parse(fs.readFileSync(path.resolve(__dirname, '../package.json'), 'utf8')).version);
  process.exit(0);
}

function _printReporters() {
  console.log('\n  Tartare reporters:\n');
  Object.keys(Tartare.builtinReporters).forEach(function(reporter) {
    console.log('    ' + reporter + ' - ' + Tartare.builtinReporters[reporter]);
  });
  console.log();
  process.exit(0);
}

function _convertToLowerCamelCase(token, index) {
  if (index > 0) {
    return token.slice(0, 1).toUpperCase() + token.slice(1).toLowerCase();
  }
  return token.toLowerCase();
}

var opts = {};
var requires = [];
var files = [];
var recursive = false;
var noExit = false;

for (var i = 2; i < process.argv.length; i++) {
  switch (process.argv[i]) {
    case '-h':
    case '--help':
      _printHelp();
      break;
    case '-V':
    case '--version':
      _printVersion();
      break;
    case '--reporters':
      _printReporters();
      break;
    case '-r':
    case '--require':
      requires.push(process.argv[++i]);
      break;
    case '-R':
    case '--reporter':
      opts.reporter = process.argv[++i];
      opts.reporter = opts.reporter || 'gherkin';
      break;
    case '-O':
    case '--reporter-options':
      opts.reporterOptions = process.argv[++i];
      break;
    case '-t':
    case '--timeout':
      opts.timeout = process.argv[++i];
      break;
    case '-f':
    case '--filter':
      opts.filter = process.argv[++i];
      break;
    case '-c':
    case '--colors':
      opts.useColors = true;
      break;
    case '-C':
    case '--no-colors':
      opts.useColors = false;
      break;
    case '--theme':
      opts.theme = process.argv[++i];
      break;
    case '--no-interactive':
      opts.interactive = false;
      break;
    case '-B':
    case '--no-bail':
      opts.bail = false;
      break;
    case '--no-exit':
      noExit = true;
      break;
    case '--no-timeouts':
      opts.enableTimeouts = false;
      break;
    case '--recursive':
      recursive = true;
      break;

    case '-i':
    case '--invert':
    case '--interfaces':
      // Discard these arguments to avoid being passed in to Mocha
      break;
    case '-u':
    case '--ui':
    case '-g':
    case '--grep':
      // Discard these arguments to avoid being passed in to Mocha
      // If the arguments have a value, discard it too
      if (!process.argv[i + 1].startsWith('-')) {
        i++;
      }
      break;

    default:
      if (process.argv[i].startsWith('-')) {
        // Other arguments that look like options are added to Tartare options
        // to make them available through the function `getTartareOptions`.
        // This kind of arguments must always have a value.
        var optName = process.argv[i].replace(/^--?/, ''); // Remove leading hyphens
        var optValue = process.argv[++i];
        if (optValue === undefined) {
          console.error('Argument "' + optName + '" must have a value');
          process.exit(-1);
        }
        // Convert optName to its lowerCamelCase form
        optName = optName.split('-').map(_convertToLowerCamelCase).join('');
        opts[optName] = optValue;
      } else {
        // The argument is a test file
        files.push(process.argv[i]);
      }
  }
}

// Require modules passed in through the -r, --require option
module.paths.push(process.cwd(), path.join(process.cwd(), 'node_modules'));
requires.forEach(function(mod) {
  require(mod);
});

// Expand and resolve the list of test files
var files_ = [];
var lookupFiles = require('mocha/lib/utils').lookupFiles;
files.forEach(function(file) {
  files_ = files_.concat(lookupFiles(file, ['js'], recursive));
});
files_ = files_.map(function(path_) {
  return path.resolve(path_);
});

// Load Tartare
var tartare;
try {
  tartare = new Tartare(opts);
} catch (err) {
  console.error('\n' + err.message + '\n');
  process.exit(-1);
}
tartare.addFiles(files_);

// Run Tartare
var runner = tartare.run(noExit ? exitLater : process.exit);
function exitLater(code) {
  process.on('exit', function() {
    process.exit(code);
  });
}

process.on('SIGINT', function() {
  runner.abort();
});
